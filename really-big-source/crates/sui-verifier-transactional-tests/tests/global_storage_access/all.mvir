// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

//# publish
module 0x0.M {
    import 0x2.ID;
    struct R has key { id: ID.VersionedID }
    struct G<phantom T> has key { id: ID.VersionedID }


    no<T>(s: &signer, addr: address, r: Self.R, g: Self.G<T>) acquires R, G {
        label l0:
        _ = exists<R>(copy(addr));
        _ = exists<G<T>>(copy(addr));
        _ = borrow_global<R>(copy(addr));
        _ = borrow_global<G<T>>(copy(addr));
        _ = borrow_global_mut<R>(copy(addr));
        _ = borrow_global_mut<G<T>>(copy(addr));
        Self.consume<Self.R>(move_from<R>(copy(addr)));
        Self.consume<Self.G<T>>(move_from<G<T>>(copy(addr)));
        move_to<R>(copy(s), move(r));
        move_to<G<T>>(copy(s), move(g));
        return;
    }

    consume<T>(t: T) {
        label l0:
        abort 0;
    }

}
