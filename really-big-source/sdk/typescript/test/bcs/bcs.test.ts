// Copyright (c) 2022, Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

import { BCS } from '../../src/bcs';
import { Base64DataBuffer as B64 } from '../../src';
import { BN } from 'bn.js';

describe('Move BCS', () => {
  beforeEach(() => {
    registerSuiCoreTypes(BCS);
  });

  it('should de/ser primitives: u8', () => {
    expect(BCS.de(BCS.U8, new B64('AQ==').getData())).toEqual(new BN(1));
    expect(BCS.de('u8', new B64('AA==').getData())).toEqual(new BN(0));
  });

  it('should ser/de u64', () => {
    const exp = 'AO/Nq3hWNBI=';
    const num = BigInt('1311768467750121216');
    const set = BCS.set('u64', num).toBytes();

    expect(new B64(set).toString()).toEqual(exp);
    expect(BCS.de('u64', new B64(exp).getData())).toEqual(
      new BN('1311768467750121216')
    );
  });

  it('should ser/de u128', () => {
    const sample = new B64('AO9ld3CFjD48AAAAAAAAAA==');
    const num = BigInt('1111311768467750121216');

    expect(BCS.de('u128', sample.getData()).toString(10)).toEqual(
      '1111311768467750121216'
    );
    expect(new B64(BCS.set('u128', num).toBytes()).toString()).toEqual(
      sample.toString()
    );
  });

  it('should de/ser custom objects', () => {
    BCS.registerStructType('Coin', {
      value: BCS.U64,
      owner: BCS.STRING,
      is_locked: BCS.BOOL,
    });

    const rustBcs = new B64('gNGxBWAAAAAOQmlnIFdhbGxldCBHdXkA');
    const expected = {
      owner: 'Big Wallet Guy',
      value: new BN('412412400000', 10),
      is_locked: false,
    };

    const setBytes = BCS.set('Coin', expected);

    expect(BCS.de('Coin', rustBcs.getData())).toEqual(expected);
    expect(setBytes.toString('base64')).toEqual(rustBcs.toString());
  });

  it('should de/ser vectors', () => {
    BCS.registerVectorType('vector<u8>', 'u8');

    // Rust-BCS generated vector with 1000 u8 elements (FF)
    const sample = new B64(largeBCSVec());

    // deserialize data with JS
    const deserialized = BCS.de('vector<u8>', sample.getData());

    // create the same vec with 1000 elements
    let arr = Array.from(Array(1000)).map(() => 255);
    const serialized = BCS.set('vector<u8>', arr);

    expect(deserialized.length).toEqual(1000);
    expect(serialized.toString('base64')).toEqual(largeBCSVec());
  });

  it('should de/ser enums', () => {
    BCS.registerStructType('Coin', { value: 'u64' });
    BCS.registerVectorType('vector<Coin>', 'Coin');
    BCS.registerEnumType('Enum', {
      single: 'Coin',
      multi: 'vector<Coin>',
    });

    // prepare 2 examples from Rust BCS
    let example1 = new B64('AICWmAAAAAAA');
    let example2 = new B64('AQIBAAAAAAAAAAIAAAAAAAAA');

    // serialize 2 objects with the same data and signature
    let set1 = BCS.set('Enum', { single: { value: 10000000 } }).toBytes();
    let set2 = BCS.set('Enum', {
      multi: [{ value: 1 }, { value: 2 }],
    }).toBytes();

    // deserialize and compare results
    expect(BCS.de('Enum', example1.getData())).toEqual(BCS.de('Enum', set1));
    expect(BCS.de('Enum', example2.getData())).toEqual(BCS.de('Enum', set2));
  });

  it('should de/ser addresses', () => {
    // Move Kitty example:
    // Wallet { kitties: vector<Kitty>, owner: address }
    // Kitty { id: 'u8' }

    BCS.registerAddressType('address', 16); // Move has 16/20/32 byte addresses

    BCS.registerStructType('Kitty', { id: 'u8' });
    BCS.registerVectorType('vector<Kitty>', 'Kitty');
    BCS.registerStructType('Wallet', {
      kitties: 'vector<Kitty>',
      owner: 'address',
    });

    // Generated with Move CLI i.e. on the Move side
    let sample = 'AgECAAAAAAAAAAAAAAAAAMD/7g==';
    let data = BCS.de('Wallet', new B64(sample).getData());

    expect(data.kitties).toHaveLength(2);
    expect(data.owner).toEqual('00000000000000000000000000c0ffee');
  });

  it('should de/ser TransactionData::Transfer', () => {
    // Test Transfer tx
    let sample = transactionData().transfer;
    let de = BCS.de('TransactionData', sample.getData());
    expect(BCS.set('TransactionData', de).toString('base64')).toEqual(
      sample.toString()
    );
  });

  it('should de/ser TransactionData::ModulePublish', () => {
    // Test Module publish tx
    let sample = transactionData().module_publish;
    let de = BCS.de('TransactionData', sample.getData());
    expect(BCS.set('TransactionData', de).toString('base64')).toEqual(
      sample.toString()
    );
  });

  it('should de/ser TransactionData::MoveCall', () => {
    // Test Move Call tx
    let sample = transactionData().move_call;
    let de = BCS.de('TransactionData', sample.getData());

    // Buffer size in this example is increased to 20KB
    // @see BCS.set(type, data, [SIZE=1024]);
    expect(
      BCS.set('TransactionData', de, 1024 * 20).toString('base64')
    ).toEqual(sample.toString());
  });
});

function registerSuiCoreTypes(bcs: typeof BCS) {
  return bcs
    .registerVectorType('vector<u8>', 'u8')
    .registerVectorType('vector<vector<u8>>', 'vector<u8>')
    .registerAddressType('AccountAddress', 20)
    .registerAddressType('ObjectID', 20)
    .registerVectorType('ObjectDigest', 'u8')
    .registerAddressType('SuiAddress', 20)
    .registerStructType('ObjectRef', {
      ObjectID: 'ObjectID',
      SequenceNumber: 'u64',
      ObjectDigest: 'ObjectDigest',
    })
    .registerStructType('Transfer', {
      recipient: 'SuiAddress',
      object_ref: 'ObjectRef',
    })
    .registerStructType('MoveModulePublish', {
      modules: 'vector<vector<u8>>',
    })
    .registerVectorType('vector<ObjectRef>', 'ObjectRef')
    .registerVectorType('vector<ObjectID>', 'ObjectID')
    .registerStructType('StructTag', {
      address: 'AccountAddress',
      module: 'string', // 'Identifier',
      name: 'string', // 'Identifier',
      type_args: 'vector<TypeTag>',
    })
    .registerEnumType('TypeTag', {
      bool: null,
      u8: null,
      u64: null,
      u128: null,
      address: null,
      signer: null,
      vector: 'vector<TypeTag>',
      struct: 'StructTag',
    })
    .registerVectorType('vector<TypeTag>', 'TypeTag')
    .registerStructType('MoveCall', {
      package: 'ObjectRef',
      module: 'string', // 'Identifier',
      function: 'string', // 'Identifier',
      type_arguments: 'vector<TypeTag>',
      object_arguments: 'vector<ObjectRef>',
      shared_object_arguments: 'vector<ObjectID>',
      pure_arguments: 'vector<vector<u8>>',
    })
    .registerEnumType('SingleTransactionKind', {
      Transfer: 'Transfer',
      Publish: 'MoveModulePublish',
      Call: 'MoveCall', // TODO: add later
    })
    .registerVectorType(
      'vector<SingleTransactionKind>',
      'SingleTransactionKind'
    )
    .registerEnumType('TransactionKind', {
      Single: 'SingleTransactionKind',
      Batch: 'vector<SingleTransactionKind>',
    })
    .registerStructType('TransactionData', {
      kind: 'TransactionKind',
      sender: 'SuiAddress',
      gas_payment: 'ObjectRef',
      gas_budget: 'u64',
    });
}

function largeBCSVec(): string {
  return '6Af
}

function transactionData(): {
  transfer: B64;
  move_call: B64;
  module_publish: B64;
} {
  return {
    transfer: new B64(
      'AAAgICAgICAgICAgICAgICAgICAgIDipBHtSiUUrimY8OkV0zq9EQYZvAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1jYTBGjMssNW2jEQENDApuAN5bRfi+YTvexoOZw2WmLlZ1JGFcm2pAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQJwAAAAAAAA=='
    ),
    move_call: new B64(
      ''
    ),
    module_publish: new B64(
      'AQEBATShHOsLBQAAAAQBAAIFAgEHAwcIChQAAAAGPFNFTEY+AAAAAAAAAAAAAAAAAAAAAAAAAAAAGfGoFGUmxBR3lkiUwfFM6+osANjnTatZDU68eV87xHGtFy2aoXu3KAAAAAAAAAAAIPhmxIPfjmVS8qH+rgZHFtJrVcfvUquOWH26ZMEDd5pqoIYBAAAAAAA='
    ),
  };
}
