#!/usr/bin/env node
const
  fs = require('fs'),
  path = require('path'),
  resolve = path.resolve,
  join = path.join,
  program = require('commander'),
  { prompt } = require('inquirer'),
  inquirer = require('inquirer'),
  chalk = require('chalk');



const { tasksBuilder } = require('../lib/tasks-builder')
const { configBuilder } = require('../lib/config-builder')
const { start } = require('../lib/start')

function NosWriteFile(file, data) {
  return new Promise((resolve, reject) => {
    var wstream = fs.createWriteStream(file);

    wstream.on('finish', function () {
      resolve();
    });

    wstream.write(data);
    wstream.end();
  })
}

function isTasksExist() {
  let dir = process.cwd()

  if (fs.existsSync(join(dir, 'wooz.tasks.json'))) {
    return dir
  }

  return false
}

function isConfigExist() {
  let dir = process.cwd()

  if (fs.existsSync(join(dir, 'wooz.config.json'))) {
    return dir
  }

  return false
}

async function generateAndSaveConfig() {
  var config = await configBuilder()
  var writeConfigFile = await NosWriteFile(join(process.cwd(), 'wooz.config.json'), JSON.stringify(config, null, '\t'));
  return config
}

async function generateAndSaveTasks() {
  var tasks = await tasksBuilder()
  var writeTasksFile = await NosWriteFile(join(process.cwd(), 'wooz.tasks.json'), JSON.stringify(tasks, null, '\t'));
  return tasks
}

var askForConfigPermission = [
  {
    type: 'confirm',
    name: 'askForOverwrite',
    message: 'No configurations found, do you want to add them now (just hit enter for YES)?',
    default: true
  }
];

var askForTasksPermission = [
  {
    type: 'confirm',
    name: 'askForOverwrite',
    message: 'No tasks found, do you want to add them now (just hit enter for YES)?',
    default: true
  }
];

async function run() {
  try {
    if (!isConfigExist()) {
      var answers = await inquirer.prompt(askForConfigPermission)
      if (answers.askForOverwrite) {
        var config = await generateAndSaveConfig()
      } else {
        console.log(chalk.red(`Can't continue without the configurations!`))
        process.exit()
      }
    } else {
      var config = require(join(process.cwd(), 'wooz.config.json'))
    }

    if (!isTasksExist()) {
      var answers = await inquirer.prompt(askForTasksPermission)

      if (answers.askForOverwrite) {
        var tasks = await generateAndSaveTasks()
      } else {
        console.log(chalk.red(`Can't continue without the tasks!`))
        process.exit()
      }
    } else {
      var tasks = require(join(process.cwd(), 'wooz.tasks.json'))
    }

    global.NosConfig = config
    global.NosTasks = tasks

    /**
     * Run the app
     */
    start()
  } catch (error) {
    console.log(chalk.red(error))
  }
}

program
  .version('1.0.4')
  .description('CLI app to automate your usual tasks!');

  program
  .command('configurations')
  .alias('c')
  .description('Reset the configurations')
  .action(
    async () => {
      try {
        if (isConfigExist()) {
          var askForPermission = [
            {
              type: 'confirm',
              name: 'askForOverwrite',
              message: 'The configurations file already exist! do you want to overwrite it (just hit enter for YES)?',
              default: true
            }
          ];

          var answers = await inquirer.prompt(askForPermission)
          if (answers.askForOverwrite) {
            var config = await generateAndSaveConfig()
          }
        } else {
          var config = await generateAndSaveConfig()
        }
      } catch (error) {
        console.log(chalk.red(error))
      }
    }
  );

program
  .command('tasks')
  .alias('t')
  .description('Reset tasks')
  .action(
    async () => {
      try {
        if (isTasksExist()) {
          var askForPermission = [
            {
              type: 'confirm',
              name: 'askForOverwrite',
              message: 'The tasks file already exist! do you want to overwrite it (just hit enter for YES)?',
              default: true
            }
          ];

          var answers = await inquirer.prompt(askForPermission)
          if (answers.askForOverwrite) {
            var tasks = await generateAndSaveTasks()
          }
        } else {
          var tasks = await generateAndSaveTasks()
        }
      } catch (error) {
        console.log(chalk.red(error))
      }
    }
  );

program
  .command('run')
  .alias('r')
  .description('Run, using the existing configurations and tasks, or create them if they do not exist.')
  .action(() => {
    run()
  });
  

program.parse(process.argv);


function make_red(txt) {
  return chalk.red(txt);
}

if (!process.argv.slice(2).length) {
  program.outputHelp(make_red);
}
