const EventEmitter=require('events').EventEmitter,_debug=require('debug'),_WebSocket=require('simple-websocket');let deasync;try{deasync=require('deasync')}catch(a){_debug('V')('Couldn\'t load deasync')}let instanceCounter=1,consCounter=1;class V extends EventEmitter{constructor(a,b){function c(n=[]){return{get(o,p){if('symbol'==typeof p)return o[p];const q=n.concat([p]).join('.');if(p.startsWith('_')||k._debug('get %s',q),p in o){if(!p.startsWith('_')&&'object'==typeof o[p]){const r=n.slice();return r.push(p),new Proxy(o[p],c(r))}return o[p]}},set(o,p,q){const r=n.concat([p]).join('.');k._debug('set %s=%o',r,q);try{return o[p]===q||(o[p]=q,k._closed||p.startsWith('_')||d({type:'set',key:r,data:q}),!0)}catch(s){return k._debug('Failed to set readonly property %o',s),!1}},deleteProperty(o,p){const q=n.concat([p]).join('.');return k._debug('deleteProperty %s',q),delete o[p],k._closed||d({type:'delete',key:q}),!0}}}function d(n,o=m){k._debug('Sending %o',n),o.send(JSON.stringify(n))}function f(n){k._debug('Init with id: %s',n),Object.defineProperty(k,'_roomId',{value:n}),g()}function g(){if(Object.defineProperty(k,'_debug',{value:_debug('v'+instanceCounter++ +':'+k._roomId)}),l=new Proxy(k,c()),k._debug('Ready'),b)return b(l)}super();const k=this;Object.defineProperty(k,'_events',{value:k._events,enumerable:!1,configurable:!1,writable:!1}),Object.defineProperty(k,'_maxListeners',{value:k._events,enumerable:!1,configurable:!1,writable:!1}),Object.defineProperty(k,'_debug',{value:_debug('V:constructor-'+consCounter++),writable:!0}),k._debug('constructor %s',a);let l;const m=new _WebSocket('wss://api.vars.online');if(Object.defineProperty(this,'_socket',{value:m}),m.on('data',function(n){switch(n=JSON.parse(n),k._debug('Received %o',n),n.type){case'roomId':{k._debug('Use %s as your roomId',n.data),console.log(`Use ${n.data} as your roomId`),f(n.data);break}case'start':{const o=n.data,p=o.vars;for(const q in k._debug('vars: %O',p),p){const r=p[q];r&&'object'==typeof r&&r.isConst?Object.defineProperty(k,q,{value:p[q].val,enumerable:!0}):k[q]=p[q]}g();break}case'set':{const o=n.key;k._debug('sync set %s',o);try{k[o]=n.data,k.emit('set',{key:n.key,value:n.data})}catch(p){k._debug('Failed to sync set')}break}case'delete':{const o=n.key;k._debug('sync delete %s',o),delete k[o],k.emit('delete',n.key);break}case'destroy':{k.close(!0),k.emit('destroyed');break}case'error':{const o=n.data;throw k._debug('Error: %s',o),console.error(o),k.close(),new Error(o)}default:k._debug('Received unknown message type');}}),m.on('close',function(n){k._debug('Socket closed %s',n),k._closed=!0}),m.on('error',function(n='Error'){throw k._debug('Socket error %s',n),k.close(),n}),m.on('connect',()=>{k._debug('Socket opened'),a?(Object.defineProperty(k,'_roomId',{value:a}),d({type:'startWithId',data:a})):(k._debug('Requesting new roomId...'),k._requestedRoomId=!0,d({type:'requestRoomId'}))}),deasync&&deasync.loopWhile)return deasync.loopWhile(()=>void 0==l),l}close(a=!1){this._debug('close'),!a&&this._requestedRoomId&&(this._debug('Remember to set your roomId to %s',this._roomId),console.log(`Remember to set your roomId to ${this._roomId}`)),this._socket&&this._socket.destroy()}destroy(){this._debug('destroy'),this._socket.send(stringify({type:'destroy'})),this.close(!0)}const(a,b){_debug('V:const')('%s %o',a,b),Object.defineProperty(this,a,{value:b,enumerable:!0}),this._socket.send(JSON.stringify({type:'set',key:a,data:{val:b,isConst:!0}}))}keys(){return Object.keys(this).filter((a)=>!a.startsWith('_')&&'domain'!==a)}}function stringify(a){return JSON.stringify(a)}module.exports=function(b='',c){return'function'==typeof b&&(c=b,b=''),!c&&deasync&&deasync.loopWhile?new V(b):'function'==typeof c?new V(b,c):new Promise((d)=>new V(b,d))};

