"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.path = exports.object = exports.map = exports.list = exports.any = exports.boolean = exports.uuid = exports.string = exports.float = exports.int = void 0;
const int = {
  message: 'a valid int',
  validate: item => item.toString().match(/^[-+]?\d+$/) !== null
};
exports.int = int;
const float = {
  message: 'a valid float',
  validate: item => !Number.isNaN(parseFloat(item)) && parseFloat(item).toString().indexOf('.') !== -1
};
exports.float = float;
const string = {
  message: 'a valid string',
  validate: item => typeof item === 'string'
};
exports.string = string;
const uuid = {
  message: 'a valid UUID',
  validate: item => item.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/) !== null
};
exports.uuid = uuid;
const boolean = {
  message: 'a valid boolean',
  validate: item => ['true', 'false'].includes(item.toString())
};
exports.boolean = boolean;
const any = {
  message: 'a valid existing item',
  validate: () => true
};
exports.any = any;
const list = {
  message: 'a valid list',
  validate: item => {
    try {
      return Array.isArray(item) && typeof item === 'object';
    } catch (e) {
      return false;
    }
  }
};
exports.list = list;
const map = {
  message: 'a valid map',
  validate: item => {
    try {
      return !Array.isArray(item) && typeof item === 'object';
    } catch (e) {
      return false;
    }
  }
};
exports.map = map;
const object = {
  message: 'a valid object',
  validate: item => {
    try {
      return !Array.isArray(item) && typeof item === 'object';
    } catch (e) {
      return false;
    }
  }
};
exports.object = object;
const path = {
  message: 'a valid path',
  validate: item => {
    try {
      JSON.parse(item);
      return false;
    } catch (e) {
      const lastChar = item.substr(item.length - 1);

      if (lastChar === '/') {
        return false;
      }

      return typeof item === 'string';
    }
  }
};
exports.path = path;