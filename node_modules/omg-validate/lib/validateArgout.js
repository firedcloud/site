"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateArgout;

var _validatorsBase = require("./validatorsBase");

var v = _interopRequireWildcard(require("./validatorsArgout"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/* eslint no-shadow: ["error", { "allow": ["state"] }] */
function validateArgout(rootOptions, value, rootError) {
  function errorCallback(message) {
    if (message.startsWith('.root')) {
      rootError(`.${message.slice(5)}`);
    } else {
      rootError(message);
    }
  }

  function validateItem(state, prop, options) {
    if (options.type === 'object') {
      (0, _validatorsBase.validateObject)(state, prop, true, ({
        state
      }) => {
        const {
          properties
        } = options;

        if (properties) {
          Object.entries(properties).forEach(([k, propOptions]) => {
            validateItem(state, k, propOptions);
          });
        }
      });
    } else if (options.type === 'enum') {
      (0, _validatorsBase.validateWith)(state, prop, true, (0, _validatorsBase.enumValues)(options.enum || []));
    } else {
      (0, _validatorsBase.validateWith)(state, prop, true, v[options.type]);
    }
  }

  validateItem({
    path: [],
    value: {
      root: value
    },
    visited: [],
    onError: errorCallback
  }, 'root', rootOptions);
}