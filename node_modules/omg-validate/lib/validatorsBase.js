"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validate = validate;
exports.validateWith = validateWith;
exports.validateObject = validateObject;
exports.validateAssocObject = validateAssocObject;
exports.array = array;
exports.enumValues = enumValues;
exports.oneOf = oneOf;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _arrayToSentence = _interopRequireDefault(require("array-to-sentence"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function validate(state, prop, required, callback) {
  const newPath = state.path.concat([prop]);
  const newValue = (0, _get2.default)(state.value, prop);

  const newState = _objectSpread({}, state, {
    path: newPath,
    value: newValue
  });

  const errorPath = `.${newPath.join('.')}`;
  state.visited.push(prop);

  if (typeof newValue === 'undefined') {
    if (required) {
      state.onError(`${errorPath} is required`);
    }

    return;
  }

  callback({
    state: newState,

    error(message) {
      state.onError(`${errorPath} ${message}`);
    }

  });
}

function validateObject(state, prop, required, callback) {
  // Since we're overwriting state visited, mark current prop as visited
  state.visited.push(prop);

  const newState = _objectSpread({}, state, {
    visited: []
  });

  validate(newState, prop, required, ({
    state,
    error
  }) => {
    if (typeof state.value !== 'object' || !state.value) {
      error('must be a valid object');
      return;
    }

    callback({
      state,
      error
    });
    const currentKeys = Object.keys(state.value);
    const unknownKeys = currentKeys.filter(item => !newState.visited.includes(item));

    if (unknownKeys.length) {
      unknownKeys.forEach(key => {
        state.onError(`.${state.path.concat([key]).join('.')} is unrecognized`);
      });
    }
  });
} // Associative object validation


function validateAssocObject(state, prop, required, callback) {
  validateObject(state, prop, required, ({
    state
  }) => {
    Object.keys(state.value).forEach(key => {
      validateObject(state, key, true, callback);
    });
  });
}

function validateWith(state, prop, required, validator) {
  validate(state, prop, required, ({
    state,
    error
  }) => {
    if (!validator.validate(state.value)) {
      error(`must be ${validator.message}`);
    }
  });
}

function array(validator) {
  const callback = value => {
    if (!Array.isArray(value) || !value.every(validator.validate)) {
      return false;
    }

    return true;
  };

  let origMessage = validator.message;

  if (origMessage.startsWith('a ')) {
    origMessage = origMessage.slice(2);
  }

  const message = `an array of ${origMessage}`;
  return {
    message,
    validate: callback
  };
}

function oneOf(...validators) {
  const callback = value => {
    if (validators.some(validator => validator.validate(value))) {
      return true;
    }

    return false;
  };

  const messagesCombined = (0, _arrayToSentence.default)(validators.map(item => item.message), {
    lastSeparator: ' or '
  });
  const message = `one of ${messagesCombined}`;
  return {
    message,
    validate: callback
  };
}

function enumValues(values) {
  const callback = value => values.includes(value);

  const message = `one of ${values.join(', ')}`;
  return {
    message,
    validate: callback
  };
}