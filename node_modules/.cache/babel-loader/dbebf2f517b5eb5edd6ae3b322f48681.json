{"ast":null,"code":"/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n\n/**\r\n * Cipher core components.\r\n */\nCryptoJS.lib.Cipher || function (undefined) {\n  // Shortcuts\n  var C = CryptoJS;\n  var C_lib = C.lib;\n  var Base = C_lib.Base;\n  var WordArray = C_lib.WordArray;\n  var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n  var C_enc = C.enc;\n  var Utf8 = C_enc.Utf8;\n  var Base64 = C_enc.Base64;\n  var C_algo = C.algo;\n  var EvpKDF = C_algo.EvpKDF;\n  /**\r\n   * Abstract base cipher template.\r\n   *\r\n   * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n   * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n   * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n   * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n   */\n\n  var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n    /**\r\n     * Configuration options.\r\n     *\r\n     * @property {WordArray} iv The IV to use for this operation.\r\n     */\n    cfg: Base.extend(),\n\n    /**\r\n     * Creates this cipher in encryption mode.\r\n     *\r\n     * @param {WordArray} key The key.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return {Cipher} A cipher instance.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n     */\n    createEncryptor: function (key, cfg) {\n      return this.create(this._ENC_XFORM_MODE, key, cfg);\n    },\n\n    /**\r\n     * Creates this cipher in decryption mode.\r\n     *\r\n     * @param {WordArray} key The key.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return {Cipher} A cipher instance.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n     */\n    createDecryptor: function (key, cfg) {\n      return this.create(this._DEC_XFORM_MODE, key, cfg);\n    },\n\n    /**\r\n     * Initializes a newly created cipher.\r\n     *\r\n     * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n     * @param {WordArray} key The key.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n     */\n    init: function (xformMode, key, cfg) {\n      // Apply config defaults\n      this.cfg = this.cfg.extend(cfg); // Store transform mode and key\n\n      this._xformMode = xformMode;\n      this._key = key; // Set initial values\n\n      this.reset();\n    },\n\n    /**\r\n     * Resets this cipher to its initial state.\r\n     *\r\n     * @example\r\n     *\r\n     *     cipher.reset();\r\n     */\n    reset: function () {\n      // Reset data buffer\n      BufferedBlockAlgorithm.reset.call(this); // Perform concrete-cipher logic\n\n      this._doReset();\n    },\n\n    /**\r\n     * Adds data to be encrypted or decrypted.\r\n     *\r\n     * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n     *\r\n     * @return {WordArray} The data after processing.\r\n     *\r\n     * @example\r\n     *\r\n     *     var encrypted = cipher.process('data');\r\n     *     var encrypted = cipher.process(wordArray);\r\n     */\n    process: function (dataUpdate) {\n      // Append\n      this._append(dataUpdate); // Process available blocks\n\n\n      return this._process();\n    },\n\n    /**\r\n     * Finalizes the encryption or decryption process.\r\n     * Note that the finalize operation is effectively a destructive, read-once operation.\r\n     *\r\n     * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n     *\r\n     * @return {WordArray} The data after final processing.\r\n     *\r\n     * @example\r\n     *\r\n     *     var encrypted = cipher.finalize();\r\n     *     var encrypted = cipher.finalize('data');\r\n     *     var encrypted = cipher.finalize(wordArray);\r\n     */\n    finalize: function (dataUpdate) {\n      // Final data update\n      if (dataUpdate) {\n        this._append(dataUpdate);\n      } // Perform concrete-cipher logic\n\n\n      var finalProcessedData = this._doFinalize();\n\n      return finalProcessedData;\n    },\n    keySize: 128 / 32,\n    ivSize: 128 / 32,\n    _ENC_XFORM_MODE: 1,\n    _DEC_XFORM_MODE: 2,\n\n    /**\r\n     * Creates shortcut functions to a cipher's object interface.\r\n     *\r\n     * @param {Cipher} cipher The cipher to create a helper for.\r\n     *\r\n     * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n     */\n    _createHelper: function () {\n      function selectCipherStrategy(key) {\n        if (typeof key == 'string') {\n          return PasswordBasedCipher;\n        } else {\n          return SerializableCipher;\n        }\n      }\n\n      return function (cipher) {\n        return {\n          encrypt: function (message, key, cfg) {\n            return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n          },\n          decrypt: function (ciphertext, key, cfg) {\n            return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n          }\n        };\n      };\n    }()\n  });\n  /**\r\n   * Abstract base stream cipher template.\r\n   *\r\n   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n   */\n\n  var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n    _doFinalize: function () {\n      // Process partial blocks\n      var finalProcessedBlocks = this._process(!!'flush');\n\n      return finalProcessedBlocks;\n    },\n    blockSize: 1\n  });\n  /**\r\n   * Mode namespace.\r\n   */\n\n  var C_mode = C.mode = {};\n  /**\r\n   * Abstract base block cipher mode template.\r\n   */\n\n  var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n    /**\r\n     * Creates this mode for encryption.\r\n     *\r\n     * @param {Cipher} cipher A block cipher instance.\r\n     * @param {Array} iv The IV words.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n     */\n    createEncryptor: function (cipher, iv) {\n      return this.Encryptor.create(cipher, iv);\n    },\n\n    /**\r\n     * Creates this mode for decryption.\r\n     *\r\n     * @param {Cipher} cipher A block cipher instance.\r\n     * @param {Array} iv The IV words.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n     */\n    createDecryptor: function (cipher, iv) {\n      return this.Decryptor.create(cipher, iv);\n    },\n\n    /**\r\n     * Initializes a newly created mode.\r\n     *\r\n     * @param {Cipher} cipher A block cipher instance.\r\n     * @param {Array} iv The IV words.\r\n     *\r\n     * @example\r\n     *\r\n     *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n     */\n    init: function (cipher, iv) {\n      this._cipher = cipher;\n      this._iv = iv;\n    }\n  });\n  /**\r\n   * Cipher Block Chaining mode.\r\n   */\n\n  var CBC = C_mode.CBC = function () {\n    /**\r\n     * Abstract base CBC mode.\r\n     */\n    var CBC = BlockCipherMode.extend();\n    /**\r\n     * CBC encryptor.\r\n     */\n\n    CBC.Encryptor = CBC.extend({\n      /**\r\n       * Processes the data block at offset.\r\n       *\r\n       * @param {Array} words The data words to operate on.\r\n       * @param {number} offset The offset where the block starts.\r\n       *\r\n       * @example\r\n       *\r\n       *     mode.processBlock(data.words, offset);\r\n       */\n      processBlock: function (words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize; // XOR and encrypt\n\n        xorBlock.call(this, words, offset, blockSize);\n        cipher.encryptBlock(words, offset); // Remember this block to use with next block\n\n        this._prevBlock = words.slice(offset, offset + blockSize);\n      }\n    });\n    /**\r\n     * CBC decryptor.\r\n     */\n\n    CBC.Decryptor = CBC.extend({\n      /**\r\n       * Processes the data block at offset.\r\n       *\r\n       * @param {Array} words The data words to operate on.\r\n       * @param {number} offset The offset where the block starts.\r\n       *\r\n       * @example\r\n       *\r\n       *     mode.processBlock(data.words, offset);\r\n       */\n      processBlock: function (words, offset) {\n        // Shortcuts\n        var cipher = this._cipher;\n        var blockSize = cipher.blockSize; // Remember this block to use with next block\n\n        var thisBlock = words.slice(offset, offset + blockSize); // Decrypt and XOR\n\n        cipher.decryptBlock(words, offset);\n        xorBlock.call(this, words, offset, blockSize); // This block becomes the previous block\n\n        this._prevBlock = thisBlock;\n      }\n    });\n\n    function xorBlock(words, offset, blockSize) {\n      // Shortcut\n      var iv = this._iv; // Choose mixing block\n\n      if (iv) {\n        var block = iv; // Remove IV for subsequent blocks\n\n        this._iv = undefined;\n      } else {\n        var block = this._prevBlock;\n      } // XOR blocks\n\n\n      for (var i = 0; i < blockSize; i++) {\n        words[offset + i] ^= block[i];\n      }\n    }\n\n    return CBC;\n  }();\n  /**\r\n   * Padding namespace.\r\n   */\n\n\n  var C_pad = C.pad = {};\n  /**\r\n   * PKCS #5/7 padding strategy.\r\n   */\n\n  var Pkcs7 = C_pad.Pkcs7 = {\n    /**\r\n     * Pads data using the algorithm defined in PKCS #5/7.\r\n     *\r\n     * @param {WordArray} data The data to pad.\r\n     * @param {number} blockSize The multiple that the data should be padded to.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n     */\n    pad: function (data, blockSize) {\n      // Shortcut\n      var blockSizeBytes = blockSize * 4; // Count padding bytes\n\n      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes; // Create padding word\n\n      var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes; // Create padding\n\n      var paddingWords = [];\n\n      for (var i = 0; i < nPaddingBytes; i += 4) {\n        paddingWords.push(paddingWord);\n      }\n\n      var padding = WordArray.create(paddingWords, nPaddingBytes); // Add padding\n\n      data.concat(padding);\n    },\n\n    /**\r\n     * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n     *\r\n     * @param {WordArray} data The data to unpad.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n     */\n    unpad: function (data) {\n      // Get number of padding bytes from last byte\n      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff; // Remove padding\n\n      data.sigBytes -= nPaddingBytes;\n    }\n  };\n  /**\r\n   * Abstract base block cipher template.\r\n   *\r\n   * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n   */\n\n  var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n    /**\r\n     * Configuration options.\r\n     *\r\n     * @property {Mode} mode The block mode to use. Default: CBC\r\n     * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n     */\n    cfg: Cipher.cfg.extend({\n      mode: CBC,\n      padding: Pkcs7\n    }),\n    reset: function () {\n      // Reset cipher\n      Cipher.reset.call(this); // Shortcuts\n\n      var cfg = this.cfg;\n      var iv = cfg.iv;\n      var mode = cfg.mode; // Reset block mode\n\n      if (this._xformMode == this._ENC_XFORM_MODE) {\n        var modeCreator = mode.createEncryptor;\n      } else\n        /* if (this._xformMode == this._DEC_XFORM_MODE) */\n        {\n          var modeCreator = mode.createDecryptor; // Keep at least one block in the buffer for unpadding\n\n          this._minBufferSize = 1;\n        }\n\n      this._mode = modeCreator.call(mode, this, iv && iv.words);\n    },\n    _doProcessBlock: function (words, offset) {\n      this._mode.processBlock(words, offset);\n    },\n    _doFinalize: function () {\n      // Shortcut\n      var padding = this.cfg.padding; // Finalize\n\n      if (this._xformMode == this._ENC_XFORM_MODE) {\n        // Pad data\n        padding.pad(this._data, this.blockSize); // Process final blocks\n\n        var finalProcessedBlocks = this._process(!!'flush');\n      } else\n        /* if (this._xformMode == this._DEC_XFORM_MODE) */\n        {\n          // Process final blocks\n          var finalProcessedBlocks = this._process(!!'flush'); // Unpad data\n\n\n          padding.unpad(finalProcessedBlocks);\n        }\n\n      return finalProcessedBlocks;\n    },\n    blockSize: 128 / 32\n  });\n  /**\r\n   * A collection of cipher parameters.\r\n   *\r\n   * @property {WordArray} ciphertext The raw ciphertext.\r\n   * @property {WordArray} key The key to this ciphertext.\r\n   * @property {WordArray} iv The IV used in the ciphering operation.\r\n   * @property {WordArray} salt The salt used with a key derivation function.\r\n   * @property {Cipher} algorithm The cipher algorithm.\r\n   * @property {Mode} mode The block mode used in the ciphering operation.\r\n   * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n   * @property {number} blockSize The block size of the cipher.\r\n   * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n   */\n\n  var CipherParams = C_lib.CipherParams = Base.extend({\n    /**\r\n     * Initializes a newly created cipher params object.\r\n     *\r\n     * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n     *         ciphertext: ciphertextWordArray,\r\n     *         key: keyWordArray,\r\n     *         iv: ivWordArray,\r\n     *         salt: saltWordArray,\r\n     *         algorithm: CryptoJS.algo.AES,\r\n     *         mode: CryptoJS.mode.CBC,\r\n     *         padding: CryptoJS.pad.PKCS7,\r\n     *         blockSize: 4,\r\n     *         formatter: CryptoJS.format.OpenSSL\r\n     *     });\r\n     */\n    init: function (cipherParams) {\n      this.mixIn(cipherParams);\n    },\n\n    /**\r\n     * Converts this cipher params object to a string.\r\n     *\r\n     * @param {Format} formatter (Optional) The formatting strategy to use.\r\n     *\r\n     * @return {string} The stringified cipher params.\r\n     *\r\n     * @throws Error If neither the formatter nor the default formatter is set.\r\n     *\r\n     * @example\r\n     *\r\n     *     var string = cipherParams + '';\r\n     *     var string = cipherParams.toString();\r\n     *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n     */\n    toString: function (formatter) {\n      return (formatter || this.formatter).stringify(this);\n    }\n  });\n  /**\r\n   * Format namespace.\r\n   */\n\n  var C_format = C.format = {};\n  /**\r\n   * OpenSSL formatting strategy.\r\n   */\n\n  var OpenSSLFormatter = C_format.OpenSSL = {\n    /**\r\n     * Converts a cipher params object to an OpenSSL-compatible string.\r\n     *\r\n     * @param {CipherParams} cipherParams The cipher params object.\r\n     *\r\n     * @return {string} The OpenSSL-compatible string.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n     */\n    stringify: function (cipherParams) {\n      // Shortcuts\n      var ciphertext = cipherParams.ciphertext;\n      var salt = cipherParams.salt; // Format\n\n      if (salt) {\n        var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n      } else {\n        var wordArray = ciphertext;\n      }\n\n      return wordArray.toString(Base64);\n    },\n\n    /**\r\n     * Converts an OpenSSL-compatible string to a cipher params object.\r\n     *\r\n     * @param {string} openSSLStr The OpenSSL-compatible string.\r\n     *\r\n     * @return {CipherParams} The cipher params object.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n     */\n    parse: function (openSSLStr) {\n      // Parse base64\n      var ciphertext = Base64.parse(openSSLStr); // Shortcut\n\n      var ciphertextWords = ciphertext.words; // Test for salt\n\n      if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n        // Extract salt\n        var salt = WordArray.create(ciphertextWords.slice(2, 4)); // Remove salt from ciphertext\n\n        ciphertextWords.splice(0, 4);\n        ciphertext.sigBytes -= 16;\n      }\n\n      return CipherParams.create({\n        ciphertext: ciphertext,\n        salt: salt\n      });\n    }\n  };\n  /**\r\n   * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n   */\n\n  var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n    /**\r\n     * Configuration options.\r\n     *\r\n     * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n     */\n    cfg: Base.extend({\n      format: OpenSSLFormatter\n    }),\n\n    /**\r\n     * Encrypts a message.\r\n     *\r\n     * @param {Cipher} cipher The cipher algorithm to use.\r\n     * @param {WordArray|string} message The message to encrypt.\r\n     * @param {WordArray} key The key.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return {CipherParams} A cipher params object.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n     */\n    encrypt: function (cipher, message, key, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg); // Encrypt\n\n      var encryptor = cipher.createEncryptor(key, cfg);\n      var ciphertext = encryptor.finalize(message); // Shortcut\n\n      var cipherCfg = encryptor.cfg; // Create and return serializable cipher params\n\n      return CipherParams.create({\n        ciphertext: ciphertext,\n        key: key,\n        iv: cipherCfg.iv,\n        algorithm: cipher,\n        mode: cipherCfg.mode,\n        padding: cipherCfg.padding,\n        blockSize: cipher.blockSize,\n        formatter: cfg.format\n      });\n    },\n\n    /**\r\n     * Decrypts serialized ciphertext.\r\n     *\r\n     * @param {Cipher} cipher The cipher algorithm to use.\r\n     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n     * @param {WordArray} key The key.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return {WordArray} The plaintext.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n     *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n     */\n    decrypt: function (cipher, ciphertext, key, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg); // Convert string to CipherParams\n\n      ciphertext = this._parse(ciphertext, cfg.format); // Decrypt\n\n      var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n      return plaintext;\n    },\n\n    /**\r\n     * Converts serialized ciphertext to CipherParams,\r\n     * else assumed CipherParams already and returns ciphertext unchanged.\r\n     *\r\n     * @param {CipherParams|string} ciphertext The ciphertext.\r\n     * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n     *\r\n     * @return {CipherParams} The unserialized ciphertext.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n     */\n    _parse: function (ciphertext, format) {\n      if (typeof ciphertext == 'string') {\n        return format.parse(ciphertext, this);\n      } else {\n        return ciphertext;\n      }\n    }\n  });\n  /**\r\n   * Key derivation function namespace.\r\n   */\n\n  var C_kdf = C.kdf = {};\n  /**\r\n   * OpenSSL key derivation function.\r\n   */\n\n  var OpenSSLKdf = C_kdf.OpenSSL = {\n    /**\r\n     * Derives a key and IV from a password.\r\n     *\r\n     * @param {string} password The password to derive from.\r\n     * @param {number} keySize The size in words of the key to generate.\r\n     * @param {number} ivSize The size in words of the IV to generate.\r\n     * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n     *\r\n     * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n     *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n     */\n    execute: function (password, keySize, ivSize, salt) {\n      // Generate random salt\n      if (!salt) {\n        salt = WordArray.random(64 / 8);\n      } // Derive key and IV\n\n\n      var key = EvpKDF.create({\n        keySize: keySize + ivSize\n      }).compute(password, salt); // Separate key and IV\n\n      var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n      key.sigBytes = keySize * 4; // Return params\n\n      return CipherParams.create({\n        key: key,\n        iv: iv,\n        salt: salt\n      });\n    }\n  };\n  /**\r\n   * A serializable cipher wrapper that derives the key from a password,\r\n   * and returns ciphertext as a serializable cipher params object.\r\n   */\n\n  var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n    /**\r\n     * Configuration options.\r\n     *\r\n     * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n     */\n    cfg: SerializableCipher.cfg.extend({\n      kdf: OpenSSLKdf\n    }),\n\n    /**\r\n     * Encrypts a message using a password.\r\n     *\r\n     * @param {Cipher} cipher The cipher algorithm to use.\r\n     * @param {WordArray|string} message The message to encrypt.\r\n     * @param {string} password The password.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return {CipherParams} A cipher params object.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n     *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n     */\n    encrypt: function (cipher, message, password, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg); // Derive key and other params\n\n      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize); // Add IV to config\n\n      cfg.iv = derivedParams.iv; // Encrypt\n\n      var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg); // Mix in derived params\n\n      ciphertext.mixIn(derivedParams);\n      return ciphertext;\n    },\n\n    /**\r\n     * Decrypts serialized ciphertext using a password.\r\n     *\r\n     * @param {Cipher} cipher The cipher algorithm to use.\r\n     * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n     * @param {string} password The password.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n     *\r\n     * @return {WordArray} The plaintext.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n     *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n     */\n    decrypt: function (cipher, ciphertext, password, cfg) {\n      // Apply config defaults\n      cfg = this.cfg.extend(cfg); // Convert string to CipherParams\n\n      ciphertext = this._parse(ciphertext, cfg.format); // Derive key and other params\n\n      var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt); // Add IV to config\n\n      cfg.iv = derivedParams.iv; // Decrypt\n\n      var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n      return plaintext;\n    }\n  });\n}();","map":{"version":3,"names":["CryptoJS","lib","Cipher","undefined","C","C_lib","Base","WordArray","BufferedBlockAlgorithm","C_enc","enc","Utf8","Base64","C_algo","algo","EvpKDF","extend","cfg","createEncryptor","key","create","_ENC_XFORM_MODE","createDecryptor","_DEC_XFORM_MODE","init","xformMode","_xformMode","_key","reset","call","_doReset","process","dataUpdate","_append","_process","finalize","finalProcessedData","_doFinalize","keySize","ivSize","_createHelper","selectCipherStrategy","PasswordBasedCipher","SerializableCipher","cipher","encrypt","message","decrypt","ciphertext","StreamCipher","finalProcessedBlocks","blockSize","C_mode","mode","BlockCipherMode","iv","Encryptor","Decryptor","_cipher","_iv","CBC","processBlock","words","offset","xorBlock","encryptBlock","_prevBlock","slice","thisBlock","decryptBlock","block","i","C_pad","pad","Pkcs7","data","blockSizeBytes","nPaddingBytes","sigBytes","paddingWord","paddingWords","push","padding","concat","unpad","BlockCipher","modeCreator","_minBufferSize","_mode","_doProcessBlock","_data","CipherParams","cipherParams","mixIn","toString","formatter","stringify","C_format","format","OpenSSLFormatter","OpenSSL","salt","wordArray","parse","openSSLStr","ciphertextWords","splice","encryptor","cipherCfg","algorithm","_parse","plaintext","C_kdf","kdf","OpenSSLKdf","execute","password","random","compute","derivedParams"],"sources":["C:/Dev/site/src/js/cipher-core.js"],"sourcesContent":["/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\r\n * Cipher core components.\r\n */\r\nCryptoJS.lib.Cipher || (function (undefined) {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var WordArray = C_lib.WordArray;\r\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\r\n    var C_enc = C.enc;\r\n    var Utf8 = C_enc.Utf8;\r\n    var Base64 = C_enc.Base64;\r\n    var C_algo = C.algo;\r\n    var EvpKDF = C_algo.EvpKDF;\r\n\r\n    /**\r\n     * Abstract base cipher template.\r\n     *\r\n     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\r\n     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\r\n     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\r\n     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\r\n     */\r\n    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {WordArray} iv The IV to use for this operation.\r\n         */\r\n        cfg: Base.extend(),\r\n\r\n        /**\r\n         * Creates this cipher in encryption mode.\r\n         *\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {Cipher} A cipher instance.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\r\n         */\r\n        createEncryptor: function (key, cfg) {\r\n            return this.create(this._ENC_XFORM_MODE, key, cfg);\r\n        },\r\n\r\n        /**\r\n         * Creates this cipher in decryption mode.\r\n         *\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {Cipher} A cipher instance.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\r\n         */\r\n        createDecryptor: function (key, cfg) {\r\n            return this.create(this._DEC_XFORM_MODE, key, cfg);\r\n        },\r\n\r\n        /**\r\n         * Initializes a newly created cipher.\r\n         *\r\n         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\r\n         */\r\n        init: function (xformMode, key, cfg) {\r\n            // Apply config defaults\r\n            this.cfg = this.cfg.extend(cfg);\r\n\r\n            // Store transform mode and key\r\n            this._xformMode = xformMode;\r\n            this._key = key;\r\n\r\n            // Set initial values\r\n            this.reset();\r\n        },\r\n\r\n        /**\r\n         * Resets this cipher to its initial state.\r\n         *\r\n         * @example\r\n         *\r\n         *     cipher.reset();\r\n         */\r\n        reset: function () {\r\n            // Reset data buffer\r\n            BufferedBlockAlgorithm.reset.call(this);\r\n\r\n            // Perform concrete-cipher logic\r\n            this._doReset();\r\n        },\r\n\r\n        /**\r\n         * Adds data to be encrypted or decrypted.\r\n         *\r\n         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\r\n         *\r\n         * @return {WordArray} The data after processing.\r\n         *\r\n         * @example\r\n         *\r\n         *     var encrypted = cipher.process('data');\r\n         *     var encrypted = cipher.process(wordArray);\r\n         */\r\n        process: function (dataUpdate) {\r\n            // Append\r\n            this._append(dataUpdate);\r\n\r\n            // Process available blocks\r\n            return this._process();\r\n        },\r\n\r\n        /**\r\n         * Finalizes the encryption or decryption process.\r\n         * Note that the finalize operation is effectively a destructive, read-once operation.\r\n         *\r\n         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\r\n         *\r\n         * @return {WordArray} The data after final processing.\r\n         *\r\n         * @example\r\n         *\r\n         *     var encrypted = cipher.finalize();\r\n         *     var encrypted = cipher.finalize('data');\r\n         *     var encrypted = cipher.finalize(wordArray);\r\n         */\r\n        finalize: function (dataUpdate) {\r\n            // Final data update\r\n            if (dataUpdate) {\r\n                this._append(dataUpdate);\r\n            }\r\n\r\n            // Perform concrete-cipher logic\r\n            var finalProcessedData = this._doFinalize();\r\n\r\n            return finalProcessedData;\r\n        },\r\n\r\n        keySize: 128/32,\r\n\r\n        ivSize: 128/32,\r\n\r\n        _ENC_XFORM_MODE: 1,\r\n\r\n        _DEC_XFORM_MODE: 2,\r\n\r\n        /**\r\n         * Creates shortcut functions to a cipher's object interface.\r\n         *\r\n         * @param {Cipher} cipher The cipher to create a helper for.\r\n         *\r\n         * @return {Object} An object with encrypt and decrypt shortcut functions.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\r\n         */\r\n        _createHelper: (function () {\r\n            function selectCipherStrategy(key) {\r\n                if (typeof key == 'string') {\r\n                    return PasswordBasedCipher;\r\n                } else {\r\n                    return SerializableCipher;\r\n                }\r\n            }\r\n\r\n            return function (cipher) {\r\n                return {\r\n                    encrypt: function (message, key, cfg) {\r\n                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\r\n                    },\r\n\r\n                    decrypt: function (ciphertext, key, cfg) {\r\n                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\r\n                    }\r\n                };\r\n            };\r\n        }())\r\n    });\r\n\r\n    /**\r\n     * Abstract base stream cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\r\n     */\r\n    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\r\n        _doFinalize: function () {\r\n            // Process partial blocks\r\n            var finalProcessedBlocks = this._process(!!'flush');\r\n\r\n            return finalProcessedBlocks;\r\n        },\r\n\r\n        blockSize: 1\r\n    });\r\n\r\n    /**\r\n     * Mode namespace.\r\n     */\r\n    var C_mode = C.mode = {};\r\n\r\n    /**\r\n     * Abstract base block cipher mode template.\r\n     */\r\n    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\r\n        /**\r\n         * Creates this mode for encryption.\r\n         *\r\n         * @param {Cipher} cipher A block cipher instance.\r\n         * @param {Array} iv The IV words.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\r\n         */\r\n        createEncryptor: function (cipher, iv) {\r\n            return this.Encryptor.create(cipher, iv);\r\n        },\r\n\r\n        /**\r\n         * Creates this mode for decryption.\r\n         *\r\n         * @param {Cipher} cipher A block cipher instance.\r\n         * @param {Array} iv The IV words.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\r\n         */\r\n        createDecryptor: function (cipher, iv) {\r\n            return this.Decryptor.create(cipher, iv);\r\n        },\r\n\r\n        /**\r\n         * Initializes a newly created mode.\r\n         *\r\n         * @param {Cipher} cipher A block cipher instance.\r\n         * @param {Array} iv The IV words.\r\n         *\r\n         * @example\r\n         *\r\n         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\r\n         */\r\n        init: function (cipher, iv) {\r\n            this._cipher = cipher;\r\n            this._iv = iv;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Cipher Block Chaining mode.\r\n     */\r\n    var CBC = C_mode.CBC = (function () {\r\n        /**\r\n         * Abstract base CBC mode.\r\n         */\r\n        var CBC = BlockCipherMode.extend();\r\n\r\n        /**\r\n         * CBC encryptor.\r\n         */\r\n        CBC.Encryptor = CBC.extend({\r\n            /**\r\n             * Processes the data block at offset.\r\n             *\r\n             * @param {Array} words The data words to operate on.\r\n             * @param {number} offset The offset where the block starts.\r\n             *\r\n             * @example\r\n             *\r\n             *     mode.processBlock(data.words, offset);\r\n             */\r\n            processBlock: function (words, offset) {\r\n                // Shortcuts\r\n                var cipher = this._cipher;\r\n                var blockSize = cipher.blockSize;\r\n\r\n                // XOR and encrypt\r\n                xorBlock.call(this, words, offset, blockSize);\r\n                cipher.encryptBlock(words, offset);\r\n\r\n                // Remember this block to use with next block\r\n                this._prevBlock = words.slice(offset, offset + blockSize);\r\n            }\r\n        });\r\n\r\n        /**\r\n         * CBC decryptor.\r\n         */\r\n        CBC.Decryptor = CBC.extend({\r\n            /**\r\n             * Processes the data block at offset.\r\n             *\r\n             * @param {Array} words The data words to operate on.\r\n             * @param {number} offset The offset where the block starts.\r\n             *\r\n             * @example\r\n             *\r\n             *     mode.processBlock(data.words, offset);\r\n             */\r\n            processBlock: function (words, offset) {\r\n                // Shortcuts\r\n                var cipher = this._cipher;\r\n                var blockSize = cipher.blockSize;\r\n\r\n                // Remember this block to use with next block\r\n                var thisBlock = words.slice(offset, offset + blockSize);\r\n\r\n                // Decrypt and XOR\r\n                cipher.decryptBlock(words, offset);\r\n                xorBlock.call(this, words, offset, blockSize);\r\n\r\n                // This block becomes the previous block\r\n                this._prevBlock = thisBlock;\r\n            }\r\n        });\r\n\r\n        function xorBlock(words, offset, blockSize) {\r\n            // Shortcut\r\n            var iv = this._iv;\r\n\r\n            // Choose mixing block\r\n            if (iv) {\r\n                var block = iv;\r\n\r\n                // Remove IV for subsequent blocks\r\n                this._iv = undefined;\r\n            } else {\r\n                var block = this._prevBlock;\r\n            }\r\n\r\n            // XOR blocks\r\n            for (var i = 0; i < blockSize; i++) {\r\n                words[offset + i] ^= block[i];\r\n            }\r\n        }\r\n\r\n        return CBC;\r\n    }());\r\n\r\n    /**\r\n     * Padding namespace.\r\n     */\r\n    var C_pad = C.pad = {};\r\n\r\n    /**\r\n     * PKCS #5/7 padding strategy.\r\n     */\r\n    var Pkcs7 = C_pad.Pkcs7 = {\r\n        /**\r\n         * Pads data using the algorithm defined in PKCS #5/7.\r\n         *\r\n         * @param {WordArray} data The data to pad.\r\n         * @param {number} blockSize The multiple that the data should be padded to.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\r\n         */\r\n        pad: function (data, blockSize) {\r\n            // Shortcut\r\n            var blockSizeBytes = blockSize * 4;\r\n\r\n            // Count padding bytes\r\n            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\r\n\r\n            // Create padding word\r\n            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\r\n\r\n            // Create padding\r\n            var paddingWords = [];\r\n            for (var i = 0; i < nPaddingBytes; i += 4) {\r\n                paddingWords.push(paddingWord);\r\n            }\r\n            var padding = WordArray.create(paddingWords, nPaddingBytes);\r\n\r\n            // Add padding\r\n            data.concat(padding);\r\n        },\r\n\r\n        /**\r\n         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\r\n         *\r\n         * @param {WordArray} data The data to unpad.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\r\n         */\r\n        unpad: function (data) {\r\n            // Get number of padding bytes from last byte\r\n            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\r\n\r\n            // Remove padding\r\n            data.sigBytes -= nPaddingBytes;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Abstract base block cipher template.\r\n     *\r\n     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\r\n     */\r\n    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {Mode} mode The block mode to use. Default: CBC\r\n         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\r\n         */\r\n        cfg: Cipher.cfg.extend({\r\n            mode: CBC,\r\n            padding: Pkcs7\r\n        }),\r\n\r\n        reset: function () {\r\n            // Reset cipher\r\n            Cipher.reset.call(this);\r\n\r\n            // Shortcuts\r\n            var cfg = this.cfg;\r\n            var iv = cfg.iv;\r\n            var mode = cfg.mode;\r\n\r\n            // Reset block mode\r\n            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n                var modeCreator = mode.createEncryptor;\r\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n                var modeCreator = mode.createDecryptor;\r\n\r\n                // Keep at least one block in the buffer for unpadding\r\n                this._minBufferSize = 1;\r\n            }\r\n            this._mode = modeCreator.call(mode, this, iv && iv.words);\r\n        },\r\n\r\n        _doProcessBlock: function (words, offset) {\r\n            this._mode.processBlock(words, offset);\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcut\r\n            var padding = this.cfg.padding;\r\n\r\n            // Finalize\r\n            if (this._xformMode == this._ENC_XFORM_MODE) {\r\n                // Pad data\r\n                padding.pad(this._data, this.blockSize);\r\n\r\n                // Process final blocks\r\n                var finalProcessedBlocks = this._process(!!'flush');\r\n            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\r\n                // Process final blocks\r\n                var finalProcessedBlocks = this._process(!!'flush');\r\n\r\n                // Unpad data\r\n                padding.unpad(finalProcessedBlocks);\r\n            }\r\n\r\n            return finalProcessedBlocks;\r\n        },\r\n\r\n        blockSize: 128/32\r\n    });\r\n\r\n    /**\r\n     * A collection of cipher parameters.\r\n     *\r\n     * @property {WordArray} ciphertext The raw ciphertext.\r\n     * @property {WordArray} key The key to this ciphertext.\r\n     * @property {WordArray} iv The IV used in the ciphering operation.\r\n     * @property {WordArray} salt The salt used with a key derivation function.\r\n     * @property {Cipher} algorithm The cipher algorithm.\r\n     * @property {Mode} mode The block mode used in the ciphering operation.\r\n     * @property {Padding} padding The padding scheme used in the ciphering operation.\r\n     * @property {number} blockSize The block size of the cipher.\r\n     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\r\n     */\r\n    var CipherParams = C_lib.CipherParams = Base.extend({\r\n        /**\r\n         * Initializes a newly created cipher params object.\r\n         *\r\n         * @param {Object} cipherParams An object with any of the possible cipher parameters.\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipherParams = CryptoJS.lib.CipherParams.create({\r\n         *         ciphertext: ciphertextWordArray,\r\n         *         key: keyWordArray,\r\n         *         iv: ivWordArray,\r\n         *         salt: saltWordArray,\r\n         *         algorithm: CryptoJS.algo.AES,\r\n         *         mode: CryptoJS.mode.CBC,\r\n         *         padding: CryptoJS.pad.PKCS7,\r\n         *         blockSize: 4,\r\n         *         formatter: CryptoJS.format.OpenSSL\r\n         *     });\r\n         */\r\n        init: function (cipherParams) {\r\n            this.mixIn(cipherParams);\r\n        },\r\n\r\n        /**\r\n         * Converts this cipher params object to a string.\r\n         *\r\n         * @param {Format} formatter (Optional) The formatting strategy to use.\r\n         *\r\n         * @return {string} The stringified cipher params.\r\n         *\r\n         * @throws Error If neither the formatter nor the default formatter is set.\r\n         *\r\n         * @example\r\n         *\r\n         *     var string = cipherParams + '';\r\n         *     var string = cipherParams.toString();\r\n         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\r\n         */\r\n        toString: function (formatter) {\r\n            return (formatter || this.formatter).stringify(this);\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Format namespace.\r\n     */\r\n    var C_format = C.format = {};\r\n\r\n    /**\r\n     * OpenSSL formatting strategy.\r\n     */\r\n    var OpenSSLFormatter = C_format.OpenSSL = {\r\n        /**\r\n         * Converts a cipher params object to an OpenSSL-compatible string.\r\n         *\r\n         * @param {CipherParams} cipherParams The cipher params object.\r\n         *\r\n         * @return {string} The OpenSSL-compatible string.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\r\n         */\r\n        stringify: function (cipherParams) {\r\n            // Shortcuts\r\n            var ciphertext = cipherParams.ciphertext;\r\n            var salt = cipherParams.salt;\r\n\r\n            // Format\r\n            if (salt) {\r\n                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\r\n            } else {\r\n                var wordArray = ciphertext;\r\n            }\r\n\r\n            return wordArray.toString(Base64);\r\n        },\r\n\r\n        /**\r\n         * Converts an OpenSSL-compatible string to a cipher params object.\r\n         *\r\n         * @param {string} openSSLStr The OpenSSL-compatible string.\r\n         *\r\n         * @return {CipherParams} The cipher params object.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\r\n         */\r\n        parse: function (openSSLStr) {\r\n            // Parse base64\r\n            var ciphertext = Base64.parse(openSSLStr);\r\n\r\n            // Shortcut\r\n            var ciphertextWords = ciphertext.words;\r\n\r\n            // Test for salt\r\n            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\r\n                // Extract salt\r\n                var salt = WordArray.create(ciphertextWords.slice(2, 4));\r\n\r\n                // Remove salt from ciphertext\r\n                ciphertextWords.splice(0, 4);\r\n                ciphertext.sigBytes -= 16;\r\n            }\r\n\r\n            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\r\n     */\r\n    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\r\n         */\r\n        cfg: Base.extend({\r\n            format: OpenSSLFormatter\r\n        }),\r\n\r\n        /**\r\n         * Encrypts a message.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {WordArray|string} message The message to encrypt.\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {CipherParams} A cipher params object.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n         */\r\n        encrypt: function (cipher, message, key, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Encrypt\r\n            var encryptor = cipher.createEncryptor(key, cfg);\r\n            var ciphertext = encryptor.finalize(message);\r\n\r\n            // Shortcut\r\n            var cipherCfg = encryptor.cfg;\r\n\r\n            // Create and return serializable cipher params\r\n            return CipherParams.create({\r\n                ciphertext: ciphertext,\r\n                key: key,\r\n                iv: cipherCfg.iv,\r\n                algorithm: cipher,\r\n                mode: cipherCfg.mode,\r\n                padding: cipherCfg.padding,\r\n                blockSize: cipher.blockSize,\r\n                formatter: cfg.format\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Decrypts serialized ciphertext.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n         * @param {WordArray} key The key.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {WordArray} The plaintext.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\r\n         */\r\n        decrypt: function (cipher, ciphertext, key, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Convert string to CipherParams\r\n            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n            // Decrypt\r\n            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\r\n\r\n            return plaintext;\r\n        },\r\n\r\n        /**\r\n         * Converts serialized ciphertext to CipherParams,\r\n         * else assumed CipherParams already and returns ciphertext unchanged.\r\n         *\r\n         * @param {CipherParams|string} ciphertext The ciphertext.\r\n         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\r\n         *\r\n         * @return {CipherParams} The unserialized ciphertext.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\r\n         */\r\n        _parse: function (ciphertext, format) {\r\n            if (typeof ciphertext == 'string') {\r\n                return format.parse(ciphertext, this);\r\n            } else {\r\n                return ciphertext;\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Key derivation function namespace.\r\n     */\r\n    var C_kdf = C.kdf = {};\r\n\r\n    /**\r\n     * OpenSSL key derivation function.\r\n     */\r\n    var OpenSSLKdf = C_kdf.OpenSSL = {\r\n        /**\r\n         * Derives a key and IV from a password.\r\n         *\r\n         * @param {string} password The password to derive from.\r\n         * @param {number} keySize The size in words of the key to generate.\r\n         * @param {number} ivSize The size in words of the IV to generate.\r\n         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\r\n         *\r\n         * @return {CipherParams} A cipher params object with the key, IV, and salt.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\r\n         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\r\n         */\r\n        execute: function (password, keySize, ivSize, salt) {\r\n            // Generate random salt\r\n            if (!salt) {\r\n                salt = WordArray.random(64/8);\r\n            }\r\n\r\n            // Derive key and IV\r\n            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\r\n\r\n            // Separate key and IV\r\n            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\r\n            key.sigBytes = keySize * 4;\r\n\r\n            // Return params\r\n            return CipherParams.create({ key: key, iv: iv, salt: salt });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * A serializable cipher wrapper that derives the key from a password,\r\n     * and returns ciphertext as a serializable cipher params object.\r\n     */\r\n    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\r\n         */\r\n        cfg: SerializableCipher.cfg.extend({\r\n            kdf: OpenSSLKdf\r\n        }),\r\n\r\n        /**\r\n         * Encrypts a message using a password.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {WordArray|string} message The message to encrypt.\r\n         * @param {string} password The password.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {CipherParams} A cipher params object.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\r\n         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\r\n         */\r\n        encrypt: function (cipher, message, password, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Derive key and other params\r\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\r\n\r\n            // Add IV to config\r\n            cfg.iv = derivedParams.iv;\r\n\r\n            // Encrypt\r\n            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\r\n\r\n            // Mix in derived params\r\n            ciphertext.mixIn(derivedParams);\r\n\r\n            return ciphertext;\r\n        },\r\n\r\n        /**\r\n         * Decrypts serialized ciphertext using a password.\r\n         *\r\n         * @param {Cipher} cipher The cipher algorithm to use.\r\n         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\r\n         * @param {string} password The password.\r\n         * @param {Object} cfg (Optional) The configuration options to use for this operation.\r\n         *\r\n         * @return {WordArray} The plaintext.\r\n         *\r\n         * @static\r\n         *\r\n         * @example\r\n         *\r\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\r\n         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\r\n         */\r\n        decrypt: function (cipher, ciphertext, password, cfg) {\r\n            // Apply config defaults\r\n            cfg = this.cfg.extend(cfg);\r\n\r\n            // Convert string to CipherParams\r\n            ciphertext = this._parse(ciphertext, cfg.format);\r\n\r\n            // Derive key and other params\r\n            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\r\n\r\n            // Add IV to config\r\n            cfg.iv = derivedParams.iv;\r\n\r\n            // Decrypt\r\n            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\r\n\r\n            return plaintext;\r\n        }\r\n    });\r\n}());\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}