(function(){
  var f, o, pinky, chai, expect;
  f = require('../lib');
  o = it;
  pinky = require('pinky');
  require('mocha-as-promised')();
  chai = require('chai');
  chai.use(require('chai-as-promised'));
  expect = chai.expect;
  describe('Pinky for Fun', function(){
    describe('λ lift', function(){
      return o('Should lift a regular function into a Promise yielding function.', function(){
        var addP;
        addP = f.lift(function(a, b){
          return a + b;
        });
        return expect(addP(2, 3)).to.become(5);
      });
    });
    return describe('λ lift-node', function(){
      var readP;
      readP = f.liftNode(function(n, f){
        switch (false) {
        case n !== 0:
          return f(new Error('no u'));
        default:
          return f(void 8, n);
        }
      });
      o('Should succeed if no error is passed to the callback.', function(){
        return expect(readP(1)).to.become(1);
      });
      return o('Should fail if an error is passed to the callback.', function(){
        return expect(readP(0)).to.be.rejected['with'](/no u/);
      });
    });
  });
}).call(this);
