"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setSpinnerAllowed = setSpinnerAllowed;
exports.setSymbolsAllowed = setSymbolsAllowed;
exports.info = info;
exports.warn = warn;
exports.error = error;
exports.fatal = fatal;
exports.spinnerStart = spinnerStart;
exports.spinnerStop = spinnerStop;
exports.spinnerSucceed = spinnerSucceed;
exports.spinnerFail = spinnerFail;
exports.logConsumers = void 0;

var _util = _interopRequireDefault(require("util"));

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _ora = _interopRequireDefault(require("ora"));

var _errors = require("./errors");

var _common = require("./common");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// NOTE: This logger is important because it knows when a spinner is running
// and logs accordingly.
let spinner = null;
const logConsumers = new Set();
exports.logConsumers = logConsumers;
let spinnerAllowed = true;

function setSpinnerAllowed(status) {
  spinnerAllowed = status;
}

let symbolsAllowed = true;

function setSymbolsAllowed(status) {
  symbolsAllowed = status;
}

function info(message) {
  let contents = message;

  if (symbolsAllowed) {
    contents = `${_logSymbols.default.info} ${contents}`;
  }

  if (spinner) {
    spinner.stop();
  }

  console.log(contents);

  if (spinner) {
    spinner.start();
  }

  logConsumers.forEach(callback => callback({
    severity: 'info',
    contents
  }));
}

function warn(message) {
  let contents = message;

  if (symbolsAllowed) {
    contents = `${_logSymbols.default.warning} ${contents}`;
  }

  if (spinner) {
    spinner.stop();
  }

  console.warn(contents);

  if (spinner) {
    spinner.start();
  }

  logConsumers.forEach(callback => callback({
    severity: 'warn',
    contents
  }));
}

function error(err) {
  const itemToLog = _common.DEBUG_CLI || err instanceof Error && !(err instanceof _errors.CLIError) ? _util.default.inspect(err, false, 5, false) : err;
  let contents = itemToLog instanceof Error ? itemToLog.message : itemToLog.toString();

  if (symbolsAllowed) {
    contents = `${_logSymbols.default.error} ${contents}`;
  }

  if (spinner) {
    spinner.stop();
  }

  console.error(contents);

  if (spinner) {
    spinner.start();
  }

  logConsumers.forEach(callback => callback({
    severity: 'error',
    contents
  }));
}

function fatal(message) {
  if (spinner) {
    spinner.stop();
  }

  console.error(message);

  try {
    _common.lifecycleDisposables.dispose();
  } catch (err) {
    if (_common.DEBUG_CLI) {
      console.error(err && err.stack);
    }
  }

  process.exit(1);
  throw new _errors.CLIError('Never should reach here.');
}

function spinnerStart(message) {
  if (spinner) {
    const err = new Error('Cannot start new spinner when one is already running'); // @ts-ignore: Useful debug vars

    err._oldSpinnerMessage = spinner.message; // @ts-ignore: Useful debug vars

    err._newSpinnerMessage = message;
    throw err;
  }

  if (spinnerAllowed) {
    spinner = (0, _ora.default)(message).start();
  }
}

function spinnerStop() {
  if (spinner) {
    spinner.stop();
    spinner = null;
  }
}

function spinnerSucceed(message) {
  if (spinner) {
    spinner.succeed(message);
    spinner = null;
  }
}

function spinnerFail(message) {
  if (spinner) {
    spinner.fail(message);
    spinner = null;
  }
}