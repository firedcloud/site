"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validate;

var logger = _interopRequireWildcard(require("../logger"));

var _config = require("../services/config");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

async function validate({
  options
}) {
  const configPaths = await (0, _config.getConfigPaths)(options, true, false);
  const microserviceConfig = await (0, _config.parseMicroserviceConfig)({
    configPath: configPaths.microservice,
    validate: false
  });
  const validationErrors = (0, _config.getValidationErrors)(microserviceConfig);

  if (!validationErrors.length) {
    if (!options.silent) {
      if (options.json) {
        logger.info(JSON.stringify({
          status: 'ok'
        }));
      } else {
        logger.info('Configuration passed validation successfully');
      }
    }
  } else {
    process.exitCode = 1;

    if (options.json) {
      logger.error(JSON.stringify({
        status: 'error',
        errors: validationErrors
      }));
    } else {
      logger.error(`Validation failed with the following errors: \n${validationErrors.map(item => `  - ${item}`).join('\n')}`);
    }
  }
}