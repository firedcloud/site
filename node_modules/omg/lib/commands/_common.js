"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateActionArguments = validateActionArguments;
exports.validateContainerEnv = validateContainerEnv;

var logger = _interopRequireWildcard(require("../logger"));

var _docker = require("../services/docker");

var _action = require("../services/action");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function validateActionArguments({
  actionName,
  eventName,
  args,
  config
}) {
  const {
    extra,
    missing,
    invalid
  } = (0, _action.processActionArguments)({
    actionName,
    eventName,
    args,
    config,
    transform: true
  });

  if (missing.length) {
    logger.error(`Missing argument${missing.length > 1 ? 's' : ''}: ${missing.join(', ')}`);
  }

  if (invalid.length) {
    logger.error(`Invalid argument${invalid.length > 1 ? 's' : ''}: ${invalid.join(', ')}`);
  }

  if (extra.length) {
    logger.error(`Unexpected argument${extra.length > 1 ? 's' : ''} ${extra.join(', ')}`);
  }

  if (missing.length || invalid.length || extra.length) {
    logger.info('You can specify arguments with -a key="value". These arguments may be JSON encoded for `map` and `object` types.');
    return false;
  }

  return true;
}

function validateContainerEnv({
  config,
  inheritEnv,
  envs
}) {
  const {
    missing,
    invalid
  } = (0, _docker.processContainerEnv)({
    config,
    inheritEnv,
    envs
  });

  if (missing.length) {
    logger.error(`Missing environment variable${missing.length > 1 ? 's' : ''}: ${missing.join(', ')}`);
  }

  if (invalid.length) {
    logger.error(`Invalid environment variable${invalid.length > 1 ? 's' : ''}: ${invalid.join(', ')}`);
  }

  if (missing.length || invalid.length) {
    logger.info('You can specify environment variables with -e KEY="VALUE"');
    return false;
  }

  return true;
}