"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseMicroserviceConfig;

var _sbFs = _interopRequireDefault(require("sb-fs"));

var _jsYaml = _interopRequireDefault(require("js-yaml"));

var logger = _interopRequireWildcard(require("../../logger"));

var _getValidationErrors = _interopRequireDefault(require("./getValidationErrors"));

var _errors = require("../../errors");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function parseMicroserviceConfig(options) {
  const parsed = _jsYaml.default.safeLoad((await _sbFs.default.readFile(options.configPath, 'utf8')));

  if (typeof parsed !== 'object' || !parsed) {
    throw new _errors.CLIError(`Malformed config file (found at: ${options.configPath})`);
  }

  if (options.validate) {
    if ((0, _getValidationErrors.default)(parsed).length) {
      logger.fatal(`Config file has errors (found at: ${options.configPath})`);
    }
  }

  return parsed;
}