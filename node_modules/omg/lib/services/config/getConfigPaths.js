"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getConfigPaths;

var _sbFs = _interopRequireDefault(require("sb-fs"));

var _path = _interopRequireDefault(require("path"));

var logger = _interopRequireWildcard(require("../../logger"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable import/export */
async function getConfigPaths(options, microserviceRequired = true, dockerRequired = true) {
  const workingDirectory = options.directory || process.cwd();

  const dockerConfigPath = _path.default.join(workingDirectory, 'Dockerfile');

  const microserviceYml = _path.default.join(workingDirectory, 'microservice.yml');

  const microserviceYaml = _path.default.join(workingDirectory, 'microservice.yaml');

  const [dockerConfigPathExists, microserviceYmlExists, microserviceYamlExists] = await Promise.all([_sbFs.default.exists(dockerConfigPath), _sbFs.default.exists(microserviceYml), _sbFs.default.exists(microserviceYaml)]);
  const foundDockerPath = dockerConfigPathExists ? dockerConfigPath : null;
  let foundMicroservicePath = null;

  if (microserviceYmlExists && microserviceYml) {
    foundMicroservicePath = microserviceYml;
  } else if (microserviceYamlExists) {
    foundMicroservicePath = microserviceYaml;
  }

  const chunks = [];

  if (microserviceRequired && !foundMicroservicePath) {
    chunks.push('a `microservice.y[a]ml`');
  }

  if (dockerRequired && !foundDockerPath) {
    chunks.push('a `Dockerfile`');
  }

  if (chunks.length) {
    logger.fatal(`Must be ran in a directory with ${chunks.join(' and ')}`);
  }

  return {
    docker: foundDockerPath,
    microservice: foundMicroservicePath
  };
}