"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = watchConfigFile;

var _chokidar = _interopRequireDefault(require("chokidar"));

var _lodash = require("lodash");

var _eventKit = require("event-kit");

var logger = _interopRequireWildcard(require("../../logger"));

var _parseMicroserviceConfig = _interopRequireDefault(require("./parseMicroserviceConfig"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEBOUNCE_MS = 500;

function watchConfigFile({
  validate,
  configPath,
  onConfigUpdated
}) {
  const watcher = _chokidar.default.watch([configPath]);

  const disposable = new _eventKit.Disposable(() => {
    watcher.close();
  });
  watcher.on('change', (0, _lodash.throttle)(() => {
    (0, _parseMicroserviceConfig.default)({
      configPath,
      validate
    }).then(configParsed => onConfigUpdated(configParsed)).catch(logger.error);
  }, DEBOUNCE_MS));
  return disposable;
}