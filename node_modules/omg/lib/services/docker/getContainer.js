"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getContainer;

var _get2 = _interopRequireDefault(require("lodash/get"));

var _getPort = _interopRequireDefault(require("get-port"));

var _getHostIp = _interopRequireDefault(require("../../helpers/getHostIp"));

var _errors = require("../../errors");

var _config = require("../config");

var _processContainerEnv = _interopRequireDefault(require("./processContainerEnv"));

var _common = require("./common");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SHOULD_MAP_TO_LOCALHOST = !['darwin', 'win32'].includes(process.platform);

async function getContainer({
  config,
  envs,
  image,
  inheritEnv
}) {
  const imageWithTag = image.includes(':') ? image : `${image}:latest`;
  const availableImages = await _common.dockerode.listImages();

  if (!availableImages.some(item => Array.isArray(item.RepoTags) && item.RepoTags.includes(imageWithTag))) {
    throw new _errors.CLIError(`Docker Image '${image}' not found on this machine. Maybe try 'docker pull ${image}' first`);
  }

  const {
    missing: missingEnvs,
    invalid: invalidEnvs,
    values: envObj
  } = (0, _processContainerEnv.default)({
    config,
    envs,
    inheritEnv
  });
  const invalidChunks = [];

  if (missingEnvs.length) {
    invalidChunks.push(`${missingEnvs.join(', ')} ${missingEnvs.length > 1 ? 'are' : 'is'} missing`);
  }

  if (invalidEnvs.length) {
    invalidChunks.push(`${invalidEnvs.join(', ')} ${invalidEnvs.length > 1 ? 'are' : 'is'} invalid`);
  }

  if (invalidChunks.length) {
    const totalCount = missingEnvs.length + invalidEnvs.length;
    throw new _errors.CLIError(`Environment variable${totalCount > 1 ? 's' : ''} ${invalidChunks.join(' and ')}`);
  }

  const portsMap = new Map();
  const portsExposed = {};
  const portBindings = {};
  const containerPorts = (0, _config.getContainerPorts)(config); // TODO: Make a list instead of map, then convert to map
  // Use Promise.all on it to make things faster with lots of ports.

  for (let i = 0, {
    length
  } = containerPorts; i < length; i += 1) {
    const containerPort = containerPorts[i]; // eslint-disable-next-line no-await-in-loop

    const freePort = await (0, _getPort.default)();
    portsMap.set(containerPort, freePort);
    portsExposed[`${containerPort}/tcp`] = {};
    portBindings[`${containerPort}/tcp`] = [{
      HostPort: freePort.toString()
    }];
  }

  const hostIp = SHOULD_MAP_TO_LOCALHOST ? await (0, _getHostIp.default)() : null;
  const container = await _common.dockerode.createContainer({
    Image: image,
    Cmd: (0, _get2.default)(config, 'lifecycle.startup.command', null),
    Env: Object.entries(envObj).map(([k, v]) => `${k}=${v}`),
    ExposedPorts: portsExposed,
    HostConfig: {
      PortBindings: portBindings,
      ExtraHosts: SHOULD_MAP_TO_LOCALHOST || !hostIp ? [] : [hostIp]
    }
  });
  return {
    container,
    portsMap
  };
}