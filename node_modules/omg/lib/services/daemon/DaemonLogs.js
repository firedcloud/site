"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _stream = require("stream");

var _readline = require("readline");

var _eventKit = require("event-kit");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DaemonLogs {
  constructor(container) {
    _defineProperty(this, "emitter", void 0);

    _defineProperty(this, "container", void 0);

    this.emitter = new _eventKit.Emitter();
    this.container = container;
  }

  async start() {
    const stdoutStream = new _stream.PassThrough();
    const stderrStream = new _stream.PassThrough();
    const stdoutLineInterface = (0, _readline.createInterface)({
      input: stdoutStream
    });
    const stderrLineInterface = (0, _readline.createInterface)({
      input: stderrStream
    });
    stdoutLineInterface.on('line', line => {
      this.emitter.emit('log-line', line);
    });
    stderrLineInterface.on('line', line => {
      this.emitter.emit('error-line', line);
    });
    const containerStream = await this.container.attach({
      stream: true,
      stdout: true,
      stderr: true
    });
    this.container.modem.demuxStream(containerStream, stdoutStream, stderrStream);
  }

  onLogLine(callback) {
    return this.emitter.on('log-line', callback);
  }

  onErrorLine(callback) {
    return this.emitter.on('error-line', callback);
  }

  onDidDestroy(callback) {
    return this.emitter.on('did-destroy', callback);
  }

  dispose() {
    this.emitter.emit('did-destroy');
    this.emitter.dispose();
  }

}

exports.default = DaemonLogs;