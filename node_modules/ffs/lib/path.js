(function(){
  var fs, path, pinky, liftNode, status, walkTree, exists, rename, move, unlink, rmdir, remove, removeRecursive;
  fs = require('fs');
  path = require('path');
  pinky = require('pinky');
  liftNode = require('pinky-for-fun').liftNode;
  status = require('./attributes').status;
  walkTree = require('./utils').walkTree;
  exists = function(pathName){
    var promise;
    promise = pinky();
    fs.exists(pathName, promise.fulfill);
    return promise;
  };
  rename = liftNode(fs.rename);
  move = curry$(function(from, destination){
    return rename(from, destination);
  });
  unlink = liftNode(fs.unlink);
  rmdir = liftNode(fs.rmdir);
  remove = function(pathName){
    return status(pathName).then(function(nodeInfo){
      switch (false) {
      case !nodeInfo.isDirectory():
        return rmdir(pathName);
      default:
        return unlink(pathName);
      }
    });
  };
  removeRecursive = function(pathName){
    var promise;
    promise = pinky();
    walkTree(remove)(
    pathName).then(function(){
      return promise.fulfill();
    }, promise.reject);
    return promise;
  };
  module.exports = {
    exists: exists,
    move: move,
    remove: remove,
    removeRecursive: removeRecursive
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
