(function(){
  var fs, path, pinky, liftNode, ref$, pipeline, all, walkTree, status, linkStatus, isFile, isDirectory, chown, changeOwner, lchown, changeLinkOwner, changeOwnerRecursive, chmod, changeMode, lchmod, changeLinkMode, changeModeRecursive;
  fs = require('fs');
  path = require('path');
  pinky = require('pinky');
  liftNode = require('pinky-for-fun').liftNode;
  ref$ = require('pinky-combinators'), pipeline = ref$.pipeline, all = ref$.all;
  walkTree = require('./utils').walkTree;
  status = liftNode(fs.stat);
  linkStatus = liftNode(fs.lstat);
  isFile = function(pathName){
    return status(pathName).then(function(it){
      return it.isFile();
    });
  };
  isDirectory = function(pathName){
    return status(pathName).then(function(it){
      return it.isDirectory();
    });
  };
  chown = liftNode(fs.chown);
  changeOwner = curry$(function(userId, groupId, pathName){
    return chown(pathName, userId, groupId);
  });
  lchown = liftNode(fs.lchown);
  changeLinkOwner = curry$(function(userId, groupId, pathName){
    return lchown(pathName, userId, groupId);
  });
  changeOwnerRecursive = curry$(function(userId, groupId, pathName){
    var promise;
    promise = pinky();
    walkTree(changeOwner(userId, groupId))(
    pathName).then(function(){
      return promise.fulfill();
    }, promise.reject);
    return promise;
  });
  chmod = liftNode(fs.chmod);
  changeMode = curry$(function(mode, pathName){
    return chmod(pathName, mode);
  });
  lchmod = liftNode(fs.lchmod);
  changeLinkMode = curry$(function(mode, pathName){
    return lchmod(pathName, mode);
  });
  changeModeRecursive = curry$(function(mode, pathName){
    var promise;
    promise = pinky();
    walkTree(changeMode(mode))(
    pathName).then(function(){
      return promise.fulfill();
    }, promise.reject);
    return promise;
  });
  module.exports = {
    status: status,
    linkStatus: linkStatus,
    isFile: isFile,
    isDirectory: isDirectory,
    changeOwner: changeOwner,
    changeLinkOwner: changeLinkOwner,
    changeOwnerRecursive: changeOwnerRecursive,
    changeMode: changeMode,
    changeLinkMode: changeLinkMode,
    changeModeRecursive: changeModeRecursive
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
