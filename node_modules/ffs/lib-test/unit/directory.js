(function(){
  var ffs, $, ref$, all, pipeline;
  ffs = require('../../lib');
  $ = require('../../lib/directory');
  ref$ = require('pinky-combinators'), all = ref$.all, pipeline = ref$.pipeline;
  describe('位 make', function(){
    o('It should create a directory at the desired location.', function(){
      return pipeline([
        function(){
          return $.make(448, 'root/dev');
        }, function(){
          return expect(ffs.isDirectory('root/dev')).to.become(true);
        }
      ]);
    });
    o('It should fail if the directory exists.', function(){
      return expect($.make(448, 'root/bin')).to.be.rejected['with'](/EEXIST/);
    });
    return o('It should fail if parent directories are missing.', function(){
      return expect($.make(448, 'root/a/b/c')).to.be.rejected['with'](/ENOENT/);
    });
  });
  describe('位 make-recursive', function(){
    o('It should create all directories in the path.', function(){
      return pipeline([
        function(){
          return $.makeRecursive(448, 'root/c/b/a');
        }, function(){
          return expect(ffs.isDirectory('root/c/b/a')).to.become(true);
        }
      ]);
    });
    return o('It should succeed if the leaf already exists.', function(){
      return pipeline([
        function(){
          return $.makeRecursive(448, 'root/c/b/a');
        }, function(){
          return expect(ffs.isDirectory('root/c/b/a')).to.become(true);
        }
      ]);
    });
  });
  describe('位 list', function(){
    return o('It should list all the files in a directory.', function(){
      return expect($.list('root/etc').then(function(it){
        return it.sort();
      })).to.become(['hostname', 'nothing', 'var']);
    });
  });
  describe('位 list-recursive', function(){
    return o('It should list all files in a directory & subdirectories.', function(){
      var ex, files;
      ex = ['root/etc/hostname', 'root/etc/nothing', 'root/etc/var', 'root/etc/var/system.log', 'root/etc/var/user.log'].sort();
      files = $.listRecursive('root/etc').then(function(it){
        return it.sort();
      });
      return expect(files).to.become(ex);
    });
  });
}).call(this);
