(function(){
  var $, ref$, all, pipeline;
  $ = require('../../lib/path');
  ref$ = require('pinky-combinators'), all = ref$.all, pipeline = ref$.pipeline;
  describe('位 exists', function(){
    o('Should eventually be true if the thing exists.', function(){
      var a;
      a = all([$.exists('root/bin'), $.exists('root/etc/hostname')]);
      return expect(a).to.become([true, true]);
    });
    return o('Should eventually be false if the thing doesnt exist.', function(){
      return expect($.exists('root/no')).to.become(false);
    });
  });
  describe('位 move', function(){
    return o('Should move something from a path to another.', function(){
      return pipeline([
        function(){
          return $.move('root/lib1', 'root/usr');
        }, function(){
          return expect(all([$.exists('root/lib1'), $.exists('root/usr')])).to.become([false, true]);
        }
      ]);
    });
  });
  describe('位 remove', function(){
    o('Should delete the thing (directory).', function(){
      return pipeline([
        function(){
          return $.remove('root/dev');
        }, function(){
          return expect($.exists('root/dev')).to.become(false);
        }
      ]);
    });
    o('Should delete the thing (file).', function(){
      return pipeline([
        function(){
          return $.remove('root/bin/rm');
        }, function(){
          return expect($.exists('root/bin/rm')).to.become(false);
        }
      ]);
    });
    return o('Should fail removing non-empty directories.', function(){
      return expect($.remove('root/usr')).to.be.rejected['with'](/ENOTEMPTY/);
    });
  });
  describe('位 remove-recursive', function(){
    return o('Should delete the directory and all its contents.', function(){
      return pipeline([
        function(){
          return $.removeRecursive('root/etc');
        }, function(){
          return expect($.exists('root/etc')).to.become(false);
        }
      ]);
    });
  });
}).call(this);
