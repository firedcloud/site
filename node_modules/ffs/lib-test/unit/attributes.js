(function(){
  var fs, ffs, $, ref$, all, pipeline;
  fs = require('fs');
  ffs = require('../../lib');
  $ = require('../../lib/attributes');
  ref$ = require('pinky-combinators'), all = ref$.all, pipeline = ref$.pipeline;
  describe('λ status', function(){
    return o('Should return a Stats object for the file node.', function(){
      return expect($.status('root')).to.eventually.be.an['instanceof'](fs.Stats);
    });
  });
  describe('λ link-status', function(){
    return o('Should return a Stats object for the node.', function(){
      return expect($.linkStatus('root/bin/l')).to.eventually.be.an['instanceof'](fs.Stats);
    });
  });
  describe('λ is-file', function(){
    o('Should be eventually true if node is a file.', function(){
      return expect($.isFile('root/bin/ls')).to.become(true);
    });
    o('Should be eventually false if node isnt a file.', function(){
      return expect($.isFile('root/bin')).to.become(false);
    });
    return o('Should be eventually true if node is a link to a file.', function(){
      return expect($.isFile('root/bin/l')).to.become(true);
    });
  });
  describe('λ is-directory', function(){
    o('Should be eventually true if node is a directory.', function(){
      return expect($.isDirectory('root/bin')).to.become(true);
    });
    o('Should be eventually false if node isnt a directory.', function(){
      return expect($.isDirectory('root/bin/ls')).to.become(false);
    });
    return o('Should be eventually true if node is a link to a directory.', function(){
      return expect($.isDirectory('root/home/user1/bin')).to.become(true);
    });
  });
  describe('λ change-owner', function(){
    return o('Should change the owner of a single file.');
  });
  describe('λ change-link-owner', function(){
    return o('Should change the owner of a file, without dereferencing.');
  });
  describe('λ change-owner-recursive', function(){
    return o('Should change the owner of all files within a path.');
  });
  describe('λ change-mode', function(){
    return o('Should change the mode of the file.', function(){
      var change, mode, check;
      change = function(){
        return $.changeMode(448, 'root/bin/cp');
      };
      mode = function(){
        return $.status('root/bin/cp').then(function(it){
          return it.mode & 448;
        });
      };
      check = function(){
        return expect(mode()).to.become(448);
      };
      return pipeline([change, check]);
    });
  });
  xdescribe('λ change-link-mode', function(){
    return o('Should change the mode of the link.', function(){
      var change, mode, check;
      change = function(){
        return $.changeLinkMode(448, 'root/bin/l');
      };
      mode = function(){
        return $.linkStatus('root/bin/cp').then(function(it){
          return it.mode & 448;
        });
      };
      check = function(){
        return expect(mode()).to.become(448);
      };
      return pipeline([change, check]);
    });
  });
  describe('λ change-mode-recursive', function(){
    return o('Should change the mode of everything in a directory.', function(){
      debugger;
      var change, mode, status, files, expectedModes, check;
      change = function(){
        return $.changeModeRecursive(448, 'root/etc');
      };
      mode = function(it){
        return $.status(it).then(function(it){
          return it.mode & 448;
        });
      };
      status = function(it){
        return all(it.map(mode));
      };
      files = ffs.listRecursive('root/etc');
      expectedModes = files.then(function(it){
        return it.map(function(){
          return 448;
        });
      });
      check = function(){
        return expectedModes.then(function(it){
          return expect(files.then(status)).to.become(it);
        });
      };
      return pipeline([change, check]);
    });
  });
}).call(this);
