(function(){
  var c, o, pinky, chai, expect, s, f, delay;
  c = require('../lib');
  o = it;
  pinky = require('pinky');
  require('mocha-as-promised')();
  chai = require('chai');
  chai.use(require('chai-as-promised'));
  expect = chai.expect;
  s = function(){
    return 'a';
  };
  f = function(){
    throw new Error('no u');
  };
  delay = function(n, f){
    var p;
    p = pinky().then(f);
    setTimeout(function(){
      return p.fulfill();
    }, n);
    return p;
  };
  describe('Pinky combinators', function(){
    describe('位 compose', function(){
      o('Should treat an empty list as fulfilled.', function(){
        return expect(c.compose([])).to.be.fulfilled;
      });
      o('Should pipe values from right to left.', function(){
        var p;
        p = c.compose([
          (function(it){
            return it + 2;
          }), (function(it){
            return it + 1;
          }), function(){
            return 0;
          }
        ]);
        return expect(p).to.become(3);
      });
      return o('Should fail as soon as one fails.', function(){
        var p;
        p = c.compose([s, f, s]);
        return expect(p).to.be.rejected['with'](/no u/);
      });
    });
    describe('位 pipeline', function(){
      o('Should treat an empty list as fulfilled.', function(){
        return expect(c.pipeline([])).to.be.fulfilled;
      });
      o('Should pipe values from left to right.', function(){
        var p;
        p = c.pipeline([
          function(){
            return 0;
          }, (function(it){
            return it + 1;
          }), (function(it){
            return it + 2;
          })
        ]);
        return expect(p).to.become(3);
      });
      return o('Should fail as soon as one fails.', function(){
        var p;
        p = c.pipeline([s, f, s]);
        return expect(p).to.be.rejected['with'](/no u/);
      });
    });
    describe('位 all', function(){
      o('Should treat an empty list as resolved.', function(){
        return expect(c.all([])).to.be.fulfilled;
      });
      o('Should resolve to a list of all promise values.', function(){
        var p;
        p = c.all([pinky('a'), pinky('b'), pinky('c')]);
        return expect(p).to.become(['a', 'b', 'c']);
      });
      o('Should resolve to a list of all promise values (regular values).', function(){
        var p;
        p = c.all(['a', 'b', 'c']);
        return expect(p).to.become(['a', 'b', 'c']);
      });
      return o('Should fail as soon as one fails.', function(){
        var x, p;
        x = pinky('a');
        p = c.all([x.then(s), x.then(f), x.then(s)]);
        return expect(p).to.be.rejected['with'](/no u/);
      });
    });
    return describe('位 any', function(){
      o('Should treat an empty list as fulfilled.', function(){
        return expect(c.any([])).to.be.fulfilled;
      });
      o('Should succeed as soon as any succeeds.', function(){
        var x, p;
        x = pinky('a');
        p = c.any([x.then(s), delay(10, x.then(f))]);
        return expect(p).to.become('a');
      });
      return o('Should fail as soon as any fails.', function(){
        var x, p;
        x = pinky('a');
        p = c.any([delay(10, x.then(s)), x.then(f)]);
        return expect(p).to.be.rejected['with'](/no u/);
      });
    });
  });
}).call(this);
