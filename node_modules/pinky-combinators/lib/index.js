(function(){
  var pinky, compose, pipeline, all, any;
  pinky = require('pinky');
  compose = function(values){
    var promise, i;
    switch (false) {
    case values.length !== 0:
      return pinky(void 8);
    default:
      promise = pinky(values.pop()());
      i = values.length;
      while (i--) {
        promise = promise.then(values[i]);
      }
      return promise;
    }
  };
  pipeline = compose$([
    compose, function(it){
      return it.reverse();
    }
  ]);
  all = function(values){
    var result, promise, len;
    switch (false) {
    case values.length !== 0:
      return pinky([]);
    default:
      result = [];
      promise = pinky();
      len = values.length;
      values.map(function(a, i){
        return pinky(a).then(fulfillOne(i), promise.reject);
      });
      return promise;
    }
    function fulfillOne(index){
      return function(value){
        result[index] = value;
        if (!--len) {
          promise.fulfill(result);
        }
        return value;
      };
    }
    return fulfillOne;
  };
  any = function(values){
    var promise;
    switch (false) {
    case values.length !== 0:
      return pinky(void 8);
    default:
      promise = pinky();
      values.map(function(it){
        return pinky(it).then(promise.fulfill, promise.reject);
      });
      return promise;
    }
  };
  module.exports = {
    compose: compose,
    pipeline: pipeline,
    all: all,
    any: any
  };
  function compose$(fs){
    return function(){
      var i, args = arguments;
      for (i = fs.length; i > 0; --i) { args = [fs[i-1].apply(this, args)]; }
      return args[0];
    };
  }
}).call(this);
